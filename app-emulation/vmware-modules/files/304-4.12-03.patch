diff --git a/vmblock-only/linux/inode.c b/vmblock-only/linux/inode.c
index 17017d5..00bc886 100644
--- a/vmblock-only/linux/inode.c
+++ b/vmblock-only/linux/inode.c
@@ -156,7 +156,7 @@ InodeOpLookup(struct inode *dir,      // IN: parent directory's inode
    inode->i_mode = S_IFLNK | S_IRWXUGO;
    inode->i_size = INODE_TO_IINFO(inode)->nameLen;
    inode->i_version = 1;
-   inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;
+   inode->i_atime = inode->i_mtime = inode->i_ctime = current_time(inode);
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3, 10, 0)
    inode->i_uid = inode->i_gid = 0;
 #else
diff --git a/vmci-only/linux/driver.c b/vmci-only/linux/driver.c
index de7e1fe..ab7516c 100644
--- a/vmci-only/linux/driver.c
+++ b/vmci-only/linux/driver.c
@@ -1731,11 +1731,11 @@ vmci_enable_msix(struct pci_dev *pdev) // IN
       vmci_dev.msix_entries[i].vector = i;
    }
 
-   result = pci_enable_msix(pdev, vmci_dev.msix_entries, VMCI_MAX_INTRS);
+   result = pci_enable_msix_exact(pdev, vmci_dev.msix_entries, VMCI_MAX_INTRS);
    if (!result) {
       vmci_dev.exclusive_vectors = TRUE;
-   } else if (result > 0) {
-      result = pci_enable_msix(pdev, vmci_dev.msix_entries, 1);
+   } else {
+      result = pci_enable_msix_exact(pdev, vmci_dev.msix_entries, 1);
    }
    return result;
 }
diff --git a/vmci-only/shared/vm_basic_defs.h b/vmci-only/shared/vm_basic_defs.h
index 3e29f0c..c03e2a7 100644
--- a/vmci-only/shared/vm_basic_defs.h
+++ b/vmci-only/shared/vm_basic_defs.h
@@ -686,6 +686,7 @@ typedef int pid_t;
                                                      lfMessageFont)
 
 /* This is not intended to be thread-safe. */
+#ifndef DO_ONCE
 #define DO_ONCE(code)                                                   \
    do {                                                                 \
       static Bool _doOnceDone = FALSE;                                  \
@@ -694,6 +695,7 @@ typedef int pid_t;
          code;                                                          \
       }                                                                 \
    } while (0)
+#endif
 
 /*
  * Bug 827422 and 838523.
